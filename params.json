{"name":"Phantomas","tagline":"PhantomJS-based web performance metrics collector and monitoring tool","body":"phantomas\r\n=========\r\n\r\n![GitHub Logo](http://upload.wikimedia.org/wikipedia/en/a/a5/Fantomas.jpg)\r\n\r\nPhantomJS-based modular web performance metrics collector. And why phantomas? Well, [because](http://en.wikipedia.org/wiki/FantÃ´mas) :)\r\n\r\n[![NPM version](https://badge.fury.io/js/phantomas.png)](http://badge.fury.io/js/phantomas)\r\n[![Build Status](https://api.travis-ci.org/macbre/phantomas.png)](http://travis-ci.org/macbre/phantomas)\r\n\r\n## Requirements\r\n\r\n* [NodeJS](http://nodejs.org)\r\n* [PhantomJS 1.9+](http://phantomjs.org/)\r\n\r\n## Installation\r\n\r\n```\r\nnpm install --global phantomas\r\n```\r\n\r\n> This will install the latest version of PhantomJS and add a symlink called ``phantomas`` (pointing to ``./bin/phantomas.js``) to your system's ``PATH``\r\n\r\n## Features\r\n\r\n* Modular approach - each metric is generated by a separate \"module\"\r\n* phantomas \"core\" acts as an [events emitter](https://github.com/macbre/phantomas/wiki/Events) that each module can hook into\r\n* in-depth metrics such as: number of events bound via jQuery, calls to ``window.write``or [complex and duplicated CSS selectors (via analyze-css)](https://github.com/macbre/analyze-css)\r\n* JSON and CSV as available output formats for easy integration with automated reporting / monitoring tools\r\n* easy integration with Continous Integration tools via TAP format and assertions handling\r\n* easy integration with other nodejs projects via CommonJS module ([see API docs](https://github.com/macbre/phantomas/wiki/npm-module))\r\n* metrics can be emitted from JavaScript code of the page phantomas is run against (thanks to [helper functions available in window.__phantomas](https://github.com/macbre/phantomas/wiki/Phantomas-scope))\r\n\r\n## Contributors\r\n\r\n* [macbre](https://github.com/macbre)\r\n* [jmervine](https://github.com/jmervine)\r\n* [jmosney](https://github.com/jmosney)\r\n* [umaar](https://github.com/umaar)\r\n* [sjhcockrell](https://github.com/sjhcockrell)\r\n* [cphoover](https://github.com/cphoover)\r\n* [LaurentGoderre](https://github.com/LaurentGoderre)\r\n* [kennydee](https://github.com/kennydee)\r\n* [iNem0o](https://github.com/iNem0o)\r\n* [stefanjudis](https://github.com/stefanjudis)\r\n* All the [contributors](https://github.com/macbre/phantomas/graphs/contributors)\r\n\r\n## Usage\r\n\r\n> phantomas comes as both command line tool and CommonJS module ([see API docs](https://github.com/macbre/phantomas/wiki/npm-module)) that you can use in your nodejs projects.\r\n\r\n### Single run\r\n\r\n``` bash\r\nphantomas https://github.com/macbre/phantomas --verbose\r\n```\r\n\r\nYou can measure the performance of your site without requests to 3rd party domains (but allowing CDN that serves your static assets):\r\n\r\n```bash\r\nphantomas https://github.com/macbre/phantomas --verbose --no-externals --allow-domain .fastly.net\r\n```\r\n\r\n#### Parameters\r\n\r\n* `--reporter=[json|csv|tap|plain]` results reporter aka format (``plain`` is the default one)\r\n* `--timeout=[seconds]` timeout for phantomas run (defaults to 15 seconds)\r\n* `--viewport=[width]x[height]` phantomJS viewport dimensions (1280x1024 is the default)\r\n* `--verbose` writes debug messages to the console\r\n* `--silent` don't write anything to the console\r\n* `--progress` shows page loading progress bar (disables verbose mode)\r\n* `--log=[log file]` log to a given file\r\n* `--modules=[moduleOne],[moduleTwo]` run only selected modules\r\n* `--skip-modules=[moduleOne],[moduleTwo]` skip selected modules\r\n* `--user-agent='Custom user agent'` provide a custom user agent (will default to something similar to ``phantomas/0.6.0 (PhantomJS/1.9.0; linux 64bit)``)\r\n* `--config=[JSON config file]` uses JSON-formatted config file to set parameters\r\n* `--cookie='bar=foo;domain=url'` document.cookie formatted string for setting a single cookie\r\n* `--cookies-file=[JAR file]` specifies the file name to store the persistent Cookies\r\n* `--no-externals` block requests to 3rd party domains\r\n* `--allow-domain=[domain],[domain]` allow requests to given domain(s) - aka whitelist\r\n* `--block-domain=[domain],[domain]` disallow requests to given domain(s) - aka blacklist\r\n* `--disable-js` disable JavaScript on the page that will be loaded\r\n* `--analyze-css` emit in-depth CSS metrics **experimental**\r\n* `--film-strip` register film strip when page is loading **experimental**\r\n* `--film-strip-dir=[dir path]` folder path to output film strip (default is ``./filmstrip`` directory) **experimental**\r\n* `--assert-[metric-name]=value` assert that given metric should be less or equal the value\r\n* `--screenshot=[file name]` render fully loaded page to a given file\r\n* `--wait-for-selector=[CSS selector` wait for an element matching given CSS selector before generating a report, timeout setting still applies (e.g. ``--wait-for-selector \"body.loaded\"``)\r\n* `--post-load-delay=[seconds]` wait X seconds before generating a report, timeout setting still applies\r\n* `--ignore-ssl-errors` ignores SSL errors, such as expired or self-signed certificate errors\r\n* `--proxy=[host:port]` specifies the proxy server to use\r\n* `--proxy-auth=[username:password]` specifies the authentication information for the proxy\r\n* `--proxy-type=[http|socks5|none]` specifies the type of the proxy server (default is http)\r\n* `--phone` force viewport and user agent of a mobile phone\r\n* `--tablet` force viewport and user agent of a tablet\r\n\r\n### Multiple runs\r\n\r\nSimply provide ``--runs`` option:\r\n\r\n``` bash\r\nphantomas https://github.com/macbre/phantomas --verbose --runs 5\r\n```\r\n\r\nOnly ``plain`` (the default one) and ``json`` reporters are currently supported in multiple runs mode.\r\n\r\n## Metrics\r\n\r\n_Current number of metrics: 100_\r\n\r\nUnits:\r\n\r\n* ms for time\r\n* bytes for size\r\n\r\n### Requests monitor (core module)\r\n\r\n> Due to [PhantomJS issue #10156](https://github.com/ariya/phantomjs/issues/10156) **body size related metrics are not reliable**\r\n\r\n* requests: total number of HTTP requests made\r\n* gzipRequests: number of gzipped HTTP responses\r\n* postRequests: number of POST requests\r\n* httpsRequests: number of HTTPS requests\r\n* notFound: number of HTTP 404 responses\r\n* timeToFirstByte: time it took to receive the first byte of the first response (that was not a redirect)\r\n* timeToLastByte: time it took to receive the last byte of the first response (that was not a redirect)\r\n* bodySize: size of the content of all responses\r\n* contentLength: size of the content of all responses (based on ``Content-Length`` header)\r\n* httpTrafficCompleted: time it took to receive the last byte of the last HTTP response\r\n\r\n### AJAX requests\r\n\r\n* ajaxRequests: number of AJAX requests\r\n\r\n### Assets types\r\n\r\n> Due to [PhantomJS issue #10156](https://github.com/ariya/phantomjs/issues/10156) **body size related metrics are not reliable**\r\n\r\n* htmlCount: number of HTML responses\r\n* htmlSize: size of HTML responses\r\n* cssCount: number of CSS responses\r\n* cssSize: size of CSS responses\r\n* jsCount: number of JS responses\r\n* jsSize: size of JS responses\r\n* jsonCount: number of JSON responses\r\n* jsonSize: size of JSON responses\r\n* imageCount: number of image responses\r\n* imageSize: size of image responses\r\n* webfontCount: number of web font responses\r\n* webfontSize: size of web font responses\r\n* base64Count: number of base64 encoded \"responses\" (no HTTP request was actually made)\r\n* base64Size: size of base64 encoded \"responses\"\r\n* otherCount: number of other responses\r\n* otherSize: size of other responses\r\n\r\n### Cache Hits\r\n\r\n> Metrics are calculated based on ``X-Cache`` header added by Varnish  / Squid servers\r\n\r\n* cacheHits: number of cache hits\r\n* cacheMisses: number of cache misses\r\n* cachePasses: number of cache passes\r\n\r\n### Headers\r\n\r\n* headersCount: number of requests and responses headers\r\n* headersSentCount: number of headers sent in requests\r\n* headersRecvCount: number of headers received in responses\r\n* headersSize: size of all headers\r\n* headersSentSize: size of sent headers\r\n* headersRecvSize: size of received headers\r\n\r\n### Domains\r\n\r\n* domains: number of domains used to fetch the page\r\n* maxRequestsPerDomain: maximum number of requests fetched from a single domain\r\n* medianRequestsPerDomain: median of requests fetched from each domain\r\n\r\n### Cookies\r\n\r\n* cookiesSent: length of cookies sent in HTTP requests\r\n* cookiesRecv: length of cookies received in HTTP responses\r\n* domainsWithCookies: number of domains with cookies set\r\n* documentCookiesLength: length of `document.cookie`\r\n* documentCookiesCount: number of cookies in `document.cookie`\r\n\r\n### DOM complexity\r\n\r\n> Metrics listed below are generated after the full page load\r\n\r\n* globalVariables: number of JS globals variables\r\n* bodyHTMLSize: the size of body tag content (``document.body.innerHTML.length``)\r\n* commentsSize: the size of HTML comments on the page\r\n* hiddenContentSize: the size of content of hidden elements on the page (with CSS ``display: none``)\r\n* whiteSpacesSize: the size of text nodes with whitespaces only\r\n* DOMelementsCount: total number of HTML element nodes\r\n* DOMelementMaxDepth: maximum level on nesting of HTML element node\r\n* iframesCount: number of iframe nodes\r\n* nodesWithInlineCSS: number of nodes with inline CSS styling (with `style` attribute)\r\n* imagesWithoutDimensions: number of ``<img>`` nodes without both ``width`` and ``height`` attribute\r\n\r\n### DOM queries\r\n\r\n* DOMqueries: the sum of all four metrics below\r\n* DOMqueriesById: number of `document.getElementById` calls\r\n* DOMqueriesByClassName: number of `document.getElementsByClassName` calls\r\n* DOMqueriesByTagName: number of `document.getElementsByTagName` calls\r\n* DOMqueriesByQuerySelectorAll: number of `document.querySelectorAll` calls\r\n* DOMinserts: number of DOM nodes inserts\r\n* DOMqueriesDuplicated: number of duplicated DOM queries\r\n\r\n### Event listeners\r\n\r\n* eventsBound: number of ``EventTarget.addEventListener`` calls\r\n\r\n### Window performance\r\n\r\n> Times below are relative to ``responseEnd`` entry in NavigationTiming (represented by ``timeToLastByte`` metric). See [NavigationTiming spec](http://w3c-test.org/webperf/specs/NavigationTiming/) for more information.\r\n\r\n* onDOMReadyTime: time it took to fire onDOMready event\r\n* onDOMReadyTimeEnd: time it took to finish processing onDOMready event **experimental**\r\n* windowOnLoadTime: time it took to fire window.load event\r\n* windowOnLoadTimeEnd: time it took to finish processing window.load event **experimental**\r\n* timeBackend: time to the first byte compared to the total loading time (in %)\r\n* timeFrontend: time to window on load compared to the total loading time (in %)\r\n\r\n### Requests statistics\r\n\r\n> **Time** is total duration, from the start of the request to the receipt of the final byte in the response. **Latency** is the time to load the first byte in the response.\r\n> https://developers.google.com/chrome-developer-tools/docs/network\r\n>\r\n> Includes ``HTTP 200`` responses only\r\n\r\n* smallestResponse: the size of the smallest response\r\n* biggestResponse: the size of the biggest response\r\n* fastestResponse: the time to the last byte of the fastest response\r\n* slowestResponse: the time to the last byte of the slowest response\r\n* smallestLatency: the time to the first byte of the fastest response\r\n* biggestLatency: the time to the first byte of the slowest response\r\n* medianResponse: median value of time to the last byte for all responses\r\n* medianLatency: median value of time to the first byte for all responses\r\n\r\n### localStorage\r\n\r\n* localStorageEntries: number of entries in local storage\r\n\r\n### jQuery\r\n\r\n> Requires jQuery 1.8.0+\r\n\r\n* jQueryVersion: version of jQuery framework (if loaded)\r\n* jQueryOnDOMReadyFunctions: number of functions bound to onDOMReady event\r\n* jQuerySizzleCalls: number of calls to [Sizzle](http://sizzlejs.com/) (including those that will be resolved using ``querySelectorAll``)\r\n\r\n### Static assets\r\n\r\n* assetsNotGzipped: static assets that were not gzipped\r\n* assetsWithQueryString: static assets requested with query string (e.g. ?foo) in URL\r\n* smallImages: images smaller than 2 kB that can be base64 encoded\r\n* multipleRequests: number of static assets that are requested more than once\r\n\r\n### Caching\r\n\r\n* cachingNotSpecified: responses with no caching header sent (either `Cache-Control` or `Expires`)\r\n* cachingTooShort: responses with too short (less than a week) caching time\r\n* cachingDisabled: responses with caching disabled (`max-age=0`)\r\n* oldCachingHeaders: responses with old, HTTP 1.0 caching headers (``Expires`` and ``Pragma``)\r\n\r\n### Time to first asset\r\n\r\n* timeToFirstCss: time it took to receive the last byte of the first CSS\r\n* timeToFirstJs: time it took to receive the last byte of the first JS\r\n* timeToFirstImage: time it took to receive the last byte of the first image\r\n\r\n### Redirects\r\n\r\n* redirects: number of HTTP redirects (either 301, 302 or 303)\r\n* redirectsTime: time it took to send and receive redirects\r\n\r\n### JavaScript bottlenecks\r\n\r\n* documentWriteCalls: number of calls to either ``document.write`` or ``document.writeln``\r\n* evalCalls: number of calls to ``eval`` (either direct or via ``setTimeout`` / ``setInterval``)\r\n\r\n### JavaScript errors\r\n\r\n> Error message and backtrace will be emitted as offenders\r\n\r\n* jsErrors: number of JavaScript errors\r\n\r\n### JavaScript console and alert\r\n\r\n* windowAlerts: number of calls to ``alert``\r\n* windowConfirms: number of calls to ``confirm``\r\n* windowPrompts: number of calls to ``prompt``\r\n* consoleMessages: number of calls to ``console.*`` functions\r\n\r\n### Optional metrics\r\n\r\n> The following metrics are emitted only when certain options are passed to phantomas\r\n\r\n* blockedRequests: number of requests blocked due to domain filtering (emitted only when in `--no-externals` / `--block-domain` mode)\r\n\r\n### CSS metrics\r\n\r\n> This is an experimental feature. Use `--analyze-css` option to enable it.\r\n\r\nTake a look at [analyze-css README](https://github.com/macbre/analyze-css) for the full list of metrics.\r\n\r\n### Reporters\r\n\r\nphantomas provides a number of reporters that can format the run results and send them to various tools. Use ``--reporter`` (or ``-R`` shortcut) option to use one.\r\n\r\n#### Formatters\r\n\r\nResults can be emitted as TAP, CSV and JSON. ``plain`` format is most useful for human beings :)\r\n\r\n#### StatsD integration\r\n\r\nMetrics from phantomas run can be sent directly to [StatsD](http://codeascraft.com/2011/02/15/measure-anything-measure-everything/) and then graphed using [graphite](http://graphite.wikidot.com/), [graphene](http://jondot.github.io/graphene/) or any other tool of your choice. For instance:\r\n\r\n```\r\n$ phantomas http://app.net/start -R statsd --statsd-host stats.app.net --statsd-port 8125 --statsd-prefix 'myApp.mainPage.'\r\n```\r\n\r\nwill sent metrics to StatsD running on ``stats.app.net:8125`` and prefix them with 'myApp.mainPage'.\r\n\r\n## For developers\r\n\r\n* [Project's wiki](https://github.com/macbre/phantomas/wiki)\r\n* Description of [events fired by phantomas core](https://github.com/macbre/phantomas/wiki/Events)\r\n* Description of [helper functions available to the browser in window.__phantomas](https://github.com/macbre/phantomas/wiki/Phantomas-scope)\r\n\r\n## Let's make Web a bit faster!\r\n\r\n* [Best Practices for Speeding Up Your Web Site](http://developer.yahoo.com/performance/rules.html) (by Yahoo!)\r\n* [Web Performance Best Practices](https://developers.google.com/speed/docs/best-practices/rules_intro) (by Google)\r\n* [Writing Efficient CSS](http://developer.mozilla.org/en/Writing_Efficient_CSS) (by Mozilla)\r\n* [Planet Performance](http://www.perfplanet.com/) - news and views from the web performance blogosphere\r\n* [Performance of 3rd Party Content](http://stevesouders.com/p3pc/) (by Steve Souders)\r\n* [Profiling CSS for fun and profit. Optimization notes.](http://perfectionkills.com/profiling-css-for-fun-and-profit-optimization-notes/)\r\n* [phantomas â PhantomJS based, modular web performance metrics generator](http://calendar.perfplanet.com/2013/phantomas/) (an article for Performance Calendar)\r\n* [How to Measure Frontend Performance With Grunt](http://4waisenkinder.de/blog/2013/12/22/how-to-measure-frontend-performance-with-phantomas-and-grunt/)\r\n\r\n### Slides\r\n\r\n* [Know Your Engines: How to Make Your JavaScript Fast](http://cdn.oreillystatic.com/en/assets/1/event/60/Know%20Your%20Engines_%20How%20to%20Make%20Your%20JavaScript%20Fast%20Presentation%201.pdf) (by David Mandelin from Mozilla)\r\n* [Velocity Conf 2013 Workshop: Avoiding Web Performance Regression](http://www.slideshare.net/marcelduran/velocity-conf-2013) (by Marcel Duran from Twitter)\r\n\r\n## Utilities\r\n\r\nUse [grunt](http://gruntjs.com/) to automate daily dev tasks, including your's application web performance, via these great tools:\r\n\r\n* [grunt-phantomas](https://github.com/stefanjudis/grunt-phantomas)\r\n* [juve](https://github.com/jared-stilwell/juve)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}